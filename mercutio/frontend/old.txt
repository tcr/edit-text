
/*
function applyOp(m: Editor, del, add) {
  del = JSON.parse(JSON.stringify(del));
  add = JSON.parse(JSON.stringify(add));

  function delInner(parent, del) {
    let children = Array.from($(parent).children());
    children.forEach(function (node) {
      if (!del.length) {
        return;
      }
      if ($(node).is('div')) {
        if (del[0].DelGroup) {
          delInner($(node), del[0].DelGroup[0]);
          $(node).children().insertBefore(node);
          $(node).remove();
          del.shift();
        } else if (del[0].DelWithGroup) {
          delInner($(node), del[0].DelWithGroup[0]);
          del.shift();
        } else if (del[0].DelSkip) {
          let value = del[0].DelSkip;
          if (value > 1) {
            del[0].DelSkip -= 1;
          } else {
            del.shift();
          }
        }
      } else if ($(node).is('span')) {
        if (del[0].DelSkip) {
          let value = del[0].DelSkip;
          if (value > 1) {
            del[0].DelSkip -= 1;
          } else {
            del.shift();
          }
        } else {
          throw new Error('fail');
        }
      }
    })
  }

  function addInner(parent, add) {
    let out = [];
    let children = Array.from($(parent).children());
    children.forEach(function (node) {
      if (!add.length) {
        return;
      }
      out.push(node);

      if ($(node).is('div')) {
        if (add[0].AddGroup) {
          addInner($(node), add[0].AddGroup[0]);
          $(node).children().insertBefore(node);
          $(node).remove();
          add.shift();
        } else if (add[0].AddWithGroup) {
          addInner($(node), add[0].AddWithGroup[0]);
          add.shift();
        } else if (add[0].AddSkip) {
          let value = add[0].AddSkip;
          if (value > 1) {
            add[0].v -= 1;
          } else {
            add.shift();
          }
        }
      } else if ($(node).is('span')) {
        if (add[0].AddSkip) {
          let value = add[0].AddSkip;
          if (value > 1) {
            add[0].AddSkip -= 1;
          } else {
            add.shift();
          }
        } else {
          throw new Error('fail');
        }
      }
    });
    return out;
  }

  delInner(m.$elem, del);
  addInner(m.$elem, add);
}
*/


          // let del = delto(active,
          //   {
          //     "DelGroup": [
          //       {
          //         "DelSkip": active.children().length
          //       }
          //     ],
          //   }
          // );
          // let add = addto(active,
          //   {
          //     "AddGroup": [attrs, [
          //       {
          //         "AddSkip": active.children().length
          //       }
          //     ]],
          //   }
          // );

          // m.op(del, add);
          // applyOp(m, del, add);
    //     }
    //   },
    // }).on("shown.bs.modal", function() {
    //   $(this).find('input').select();
    // });
  // }
// }